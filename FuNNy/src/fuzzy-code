char *init_code[]={
"static int init;\n",
"#include <stdio.h>",
"#include <math.h>",
"#include \"matx.h\"\n\n",
"#include \"adapt.h\"\n\n",
"#include \"fuzzy.h\"\n\n",
"#define aggregering(A, B) A = ((A) > (B) ? (A) : (B))\n\n",
"#define very(A) (A)*(A) \n",
"#define morl(A) sqrt(A) \n",
"#define extremly(A) (A)*(A)*(A)*(A) \n\n",
"float membertrap(double *data, double x)",
"{",
"\tfloat val;",
"\tif (x <= *data)",
"\t\tval= 0.0;",
"\telse {",
"\t\tif (x >= *(data+3))",
"\t\t\tval= 0.0;",
"\t\telse {",
"\t\t\tif ((*data <= x) & (x < *(data+1)))",
"\t\t\t\tval= (x-*data)/(*(data+1)-*data);",
"\t\t\telse {",
"\t\t\t\tif  ((*(data+1) <= x) & (x < *(data+2)))",
"\t\t\t\t\tval= 1.0;",
"\t\t\t\telse {",
"\t\t\t\t\tif  ((*(data+2) <= x) & (x < *(data+3)))",
"\t\t\t\t\t\tval= 1.0-(x-*(data+2))/(*(data+3)-*(data+2));",
"\t\t\t\t}",
"\t\t\t}",
"\t\t}",
"\t}",
"\t return (val)**(data+4);",
"}\n",
"float memberbell(double *data, double x)",
"{",
"\t if (*(data+1) != 0.0 ) return exp(-0.5*((x-*data)/(*(data+1)))*((x-*data)/(*(data+1))))**(data+2);",
"\t else return (x == *data) ?  *(data+2) : 0.0;",
"}\n",
"float membersigmoid(double *data, double x)",
"{",
"\t if (*data > *(data+1)) {",
"\t\t if (x > *data) return (float)*(data+2);",
"\t\t else if (x < *(data+1)) return (float)0.0;",
"\t\t else return (0.5 - 0.5*cos((x-*(data+1))*3.1415/(*data-*(data+1))))**(data+2);",
"\t }",
"\t else if (*data < *(data+1)) {",
"\t\t if (x < *data) return (float)*(data+2);",
"\t\t else if (x > *(data+1)) return (float)0.0;",
"\t\t else return (0.5 + 0.5*cos((x-*data)*3.1415/(*(data+1)-*data)))**(data+2);",
"\t}\n",
"\t else return *(data+2)/2.0;",
"}\n",
"float membertri(double *data, double x)",
"{",
"\tfloat val;",
"\tif (x <= *data)",
"\t\tval= 0.0;",
"\telse {",
"\t\tif (x >= *(data+2))",
"\t\t\tval= 0.0;",
"\t\telse {",
"\t\t\tif ((*data <= x) & (x < *(data+1)))",
"\t\t\t\tval= (x-*data)/(*(data+1)-*data);",
"\t\t\telse {",
"\t\t\t\tif  ((*(data+1) <= x) & (x < *(data+2)))",
"\t\t\t\t\tval= 1.0-(x-*(data+1))/(*(data+2)-*(data+1));",
"\t\t\t}",
"\t\t}",
"\t}",
"\t return (val)**(data+3);",
"}\n",
"float about_set_1(double x, double mean)",
"{",
"\t double data[3];",
"\t data[0]=mean;",
"\t data[1]=mean*ABOUT_STD;",
"\t data[2]=1.0;",
"\t return memberbell(data, x);",
"}\n",
"float about_set_2(double x, double mean1, double mean2)",
"{",
"\t double data[3];",
"\t data[2]=1.0;",
"\t if (mean1 <= mean2) {",
"\t\t data[1]=(mean2-mean1)*ABOUT_STD;",
"\t\t if (x<  mean1) {",
"\t\t\t data[0]=mean1;",
"\t\t\t return memberbell(data, x);",
"\t\t } else ",
"\t\t if (x > mean2) {",
"\t\t\t data[0]=mean2;",
"\t\t\treturn memberbell(data, x);",
"\t\t } else return (float) 1.0;",
"\t }",
"\t if (mean1 >= mean2) {",
"\t\t data[1]=(mean1-mean2)*ABOUT_STD;",
"\t\t if (x < mean2) {",
"\t\t\t data[0]=mean2;",
"\t\t\t return memberbell(data, x);",
"\t\t } else ",
"\t\t if (x > mean1) {",
"\t\t\t data[0]=mean1;",
"\t\t\t return memberbell(data, x);",
"\t\t } else return (float) 1.0;",
"\t }",
"}\n",
0,
};

